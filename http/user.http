### 1. 회원가입
POST http://localhost:8080/users
Content-Type: application/json

{
  "username":"jakelee0808",
  "password":"nada5011!@@#AS",
  "nickname":"jakelee"
}

### 2. 로그인
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "username":"jakelee0808",
  "password":"nada5011!@@#AS"
}

> {%
    client.test("Login Response", function() {
        client.assert(response.status === 200, "Response status should be 200");
        client.global.set("auth_token", response.body.data.accessToken);
    });
%}

### 3. 토큰 갱신 테스트
POST http://localhost:8080/users/refresh
Content-Type: application/json

{
  "token": "{{auth_token}}"
}

> {%
    client.test("Refresh Token Response", function() {
        client.assert(response.status === 200, "Response status should be 200");
        client.assert(response.body.success === true, "Success should be true");
        client.assert(response.body.message === "토큰 재발급 성공", "Message should be correct");
        client.assert(response.body.data.accessToken !== null, "New access token should not be null");
        
        // 새로운 액세스 토큰으로 업데이트
        client.global.set("auth_token", response.body.data.accessToken);
    });
%}

### 4. 로그아웃
POST http://localhost:8080/users/logout
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{}

### 5. 로그아웃 후 토큰 갱신 시도 (실패해야 함)
POST http://localhost:8080/users/refresh
Content-Type: application/json

{
  "token": "{{auth_token}}"
}

> {%
    client.test("Refresh After Logout Response", function() {
        client.assert(response.status === 401, "Response status should be 401");
        client.assert(response.body.success === false, "Success should be false");
        client.assert(response.body.message === "로그아웃된 사용자입니다. 다시 로그인해주세요.", "Message should be correct");
    });
%}

### 6. 회원탈퇴
DELETE http://localhost:8080/users/signout
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "password":"nada5011!@@#AS"
}